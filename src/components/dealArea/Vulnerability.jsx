import React, {useContext} from "react"

import {formatComment} from "../commentsArea/Comment"
import {seats} from "../Constants"
import HandContext from "../../context/HandContext"

const Vulnerability = () => {
  const {
    toggleVulnerability,
    toggleDealer,
    declarer,
    dealer,
    seat,
    nsvulnerable,
    ewvulnerable,
    tricksWonDeclarer,
    tricksPlayed,
    contract,
  } = useContext(HandContext)

  const declarerSymbol = seats[declarer]
  const contractText = /c|d|h|s/.test(contract) ? `${contract[0]}!${contract.substring(1)}` : contract

  const tricksGreen = tricksWonDeclarer
  const tricksRed = tricksPlayed - tricksWonDeclarer

  const upDownPair = seat % 2 === 0
  const upDownVulnerability = seat % 2 === 0 ? nsvulnerable : ewvulnerable
  const leftRightVulnerability = seat % 2 === 0 ? ewvulnerable : nsvulnerable

  const size = 150
  const gutter = size / 5
  const inner = size - gutter * 2
  const half = size / 2

  const dealerX = [half, size - gutter / 2, half, gutter / 2][dealer]
  const dealerY = [gutter / 2, half, size - gutter / 2, half][dealer]

  let innerUI = null
  if (contractText) {
    innerUI = (
      <>
        <rect
          x={gutter * 1.25}
          y={half + 5}
          width={gutter}
          height={gutter}
          fill="#007f00"
          borderRadius="5"
          style={{rx: 3, ry: 3}}
        />
        <text
          x={1.75 * gutter}
          y={half + 0.5 * gutter + 5}
          alignmentBaseline="middle"
          textAnchor="middle"
          fill="white"
          fontWeight="bold">
          {tricksGreen}
        </text>
        <rect x={size - gutter * 2.25} y={half + 5} width={gutter} height={gutter} fill="red" style={{rx: 3, ry: 3}} />
        <text
          x={size - gutter * 1.75}
          y={half + 0.5 * gutter + 5}
          alignmentBaseline="middle"
          textAnchor="middle"
          fill="white"
          fontWeight="bold">
          {tricksRed}
        </text>
        <text>{formatComment(`${contractText} ${declarerSymbol}`)}</text>
      </>
    )
  }

  return (
    <g className="vulnerability" transform={`translate(20,20)`}>
      <path
        d={`M0,0 l${half},${half} ${half},-${half}z`}
        fill={upDownVulnerability ? "red" : "white"}
        stroke="black"
        onClick={() => toggleVulnerability(upDownPair, upDownVulnerability)}
      />
      <path
        d={`M0,${size} l${half},-${half} l${half},${half}z`}
        fill={upDownVulnerability ? "red" : "white"}
        stroke="black"
        onClick={() => toggleVulnerability(upDownPair, upDownVulnerability)}
      />
      <path
        d={`M0,0 l${half},${half} l-${half},${half}z`}
        fill={leftRightVulnerability ? "red" : "white"}
        stroke="black"
        onClick={() => toggleVulnerability(!upDownPair, leftRightVulnerability)}
      />
      <path
        d={`M${size},0 l-${half},${half} l${half},${half}z`}
        fill={leftRightVulnerability ? "red" : "white"}
        stroke="black"
        onClick={() => toggleVulnerability(!upDownPair, leftRightVulnerability)}
      />

      <rect
        x={gutter}
        y={gutter}
        width={inner}
        height={inner}
        fill="#9ad7f3"
        style={{rx: 7, ry: 7}}
        stroke="black"
        onClick={toggleDealer}
      />
      <text x={dealerX} y={dealerY} alignmentBaseline="middle" textAnchor="middle" fontWeight="bold">
        D
      </text>
      {innerUI}
    </g>
  )
}

export default Vulnerability
